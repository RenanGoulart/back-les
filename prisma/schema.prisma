// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PhoneType {
  FIXO
  CELULAR
}

enum Gender {
  MASCULINO
  FEMININO
  NAO_INFORMADO
}

enum UserStatus {
  ATIVO
  INATIVO
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique
  name      String
  password  String
  cpf       String
  ddd       String
  phone     String
  credits   Float        @default(0.0)
  phoneType PhoneType
  gender    Gender
  birthDate DateTime
  status    UserStatus
  addresses Address[]
  cards     CreditCard[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Cart      Cart[]
  Order     Order[]
}

enum CardBrand {
  VISA
  MASTERCARD
  AMERICAN_EXPRESS
  DISCOVER
  DINERS_CLUB
  JCB
  MAESTRO
  ELO
  HIPERCARD
  OUTRO
}

model CreditCard {
  id         String      @id @default(uuid())
  number     String
  cardHolder String
  cvv        String
  isMain     Boolean
  cardBrand  CardBrand
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  User       User?       @relation(fields: [userId], references: [id])
  userId     String?
  ordersCard OrderCard[]
}

model Country {
  id        String   @id @default(uuid())
  name      String
  State     State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id        String   @id @default(uuid())
  name      String
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String
  City      City[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum AddressType {
  COBRANCA
  ENTREGA
}

enum StreetType {
  RUA
  AVENIDA
  TRAVESSA
  ALAMEDA
  ESTRADA
  OUTRO
}

enum ResidenceType {
  CASA
  APARTAMENTO
  CHACARA
  CONDOMINIO
  OUTRO
}

model Address {
  id            String        @id @default(uuid())
  street        String
  number        String
  district      String
  zipCode       String
  observation   String
  city          City          @relation(fields: [cityId], references: [id])
  cityId        String
  addressType   AddressType
  streetType    StreetType
  residenceType ResidenceType
  isMain        Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?
  orders        Order[]
}

enum PricingGroup {
  EDICAO_ESPECIAL
  EDICAO_LIMITADA
  EDICAO_NORMAL
}

enum Category {
  ROCK
  POP
  HIP_HOP
  MPB
  BLUES
  FUNK
  REGGAE
}

model Track {
  id        String   @id @default(uuid())
  name      String
  duration  String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Product {
  id              String       @id @default(uuid())
  artist          String
  album           String
  year            String
  producer        String
  numberOfTracks  String
  tracks          Track[]
  height          String
  width           String
  weight          String
  pricingGroup    PricingGroup
  categories      Category[]
  barCode         String
  quantityInStock Int          @default(0)
  price           Float
  photo           String       @default("https://onedrive.live.com/embed?resid=6ACCA5C0ADB356D%2126807&authkey=%21AMBcS3Ed8K4FJHQ&width=816&height=664")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  CartItem        CartItem[]
  OrderItem       OrderItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  salePrice Float
  productId String
  product   Product @relation(fields: [productId], references: [id])
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
}

model Cart {
  id        String     @id @default(uuid())
  total     Float
  cartItems CartItem[]
  User      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum OrderStatus {
  EM_PROCESSAMENTO
  APROVADA
  REPROVADA
  EM_TRANSITO
  ENTREGUE
  TROCA_SOLICITADA
  TROCA_AUTORIZADA
  TROCADO
}

enum ExchangeStatus {
  TROCA_SOLICITADA
  TROCA_AUTORIZADA
  TROCADO
}

model Coupon {
  id             String   @id @default(uuid())
  name           String   @unique
  value          Float
  quantity       Int
  expirationDate DateTime
  orders         Order[]
}

model OrderCard {
  id      String     @id @default(uuid())
  value   Float
  orderId String
  order   Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  cardId  String
  card    CreditCard @relation(fields: [cardId], references: [id])
}

model OrderItem {
  id        String          @id @default(uuid())
  quantity  Int
  status    ExchangeStatus?
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  orderId   String
  Order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(uuid())
  code        String
  status      OrderStatus
  freight     Float
  total       Float
  creditsUsed Float
  addressId   String
  address     Address     @relation(fields: [addressId], references: [id])
  couponId    String?
  coupon      Coupon?     @relation(fields: [couponId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  cards       OrderCard[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
